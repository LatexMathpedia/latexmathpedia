"use client"

import { useState } from "react"
import { Check, ChevronsUpDown } from "lucide-react"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Separator } from "@/components/ui/separator"
import { cn } from "@/lib/utils"
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"

const categories = {
    "Matemáticas": [
        "Análisis y Cálculo",
        "Álgebra y Geometría",
        "Topología",
        "Probabilidad y Estadística",
        "Ecuaciones Diferenciales y Métodos Numéricos",
        "Optimización y Programación Matemática"
    ],
    "Software": [
        "Fundamentos y Algoritmos",
        "Estructuras, Computación y Lenguajes",
        "Arquitectura y Sistemas",
        "Ingeniería del Software",
        "Bases de Datos",
        "Redes y Seguridad"
    ]
}

function WelcomePage() {
  const [title, setTitle] = useState("");
  const [pdfUrl, setPdfUrl] = useState("");
  
  const [categoryOpen, setCategoryOpen] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState("");
  
  const [subcategoryOpen, setSubcategoryOpen] = useState(false);
  const [selectedSubcategory, setSelectedSubcategory] = useState("");
  
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log({
      title,
      pdfUrl,
      category: selectedCategory,
      subcategory: selectedSubcategory
    });
  };

  return (
    <div className="p-8 w-full max-w-screen-xl mx-auto">
      <h1 className="text-3xl font-bold mb-6">Administración de Contenidos</h1>
      
      <Card>
        <CardHeader>
          <CardTitle>Subir un nuevo PDF</CardTitle>
          <CardDescription>Completa el formulario para agregar un nuevo documento PDF a la plataforma.</CardDescription>
        </CardHeader>
        
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="space-y-6">
              <div className="grid gap-2">
                <Label htmlFor="title">Título del documento</Label>
                <Input 
                  id="title" 
                  placeholder="Ej: Teorema de Pitágoras - Demostración y aplicaciones"
                  className="w-full"
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                />
              </div>
              
              <div className="grid gap-2">
                <Label htmlFor="pdfUrl">Enlace al PDF</Label>
                <Input 
                  id="pdfUrl" 
                  placeholder="https://ejemplo.com/archivo.pdf"
                  className="w-full"
                  value={pdfUrl}
                  onChange={(e) => setPdfUrl(e.target.value)}
                />
              </div>
              
              <Separator className="my-4" />
              
              {/* Campos de categoría y subcategoría en fila para pantallas grandes */}
              <div className="md:flex md:flex-row md:gap-6">
                <div className="flex-1 grid gap-2 mb-4 md:mb-0">
                  <Label htmlFor="category">Categoría</Label>
                  <Popover open={categoryOpen} onOpenChange={setCategoryOpen}>
                    <PopoverTrigger asChild>
                      <Button
                        id="category"
                        variant="outline"
                        role="combobox"
                        aria-expanded={categoryOpen}
                        className="w-full justify-between"
                      >
                        {selectedCategory || "Selecciona una categoría"}
                        <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-full p-0">
                      <Command>
                        <CommandInput placeholder="Buscar categoría..." />
                        <CommandList>
                          <CommandEmpty>No se encontraron categorías.</CommandEmpty>
                          <CommandGroup>
                            {Object.keys(categories).map((category) => (
                              <CommandItem
                                key={category}
                                value={category}
                                onSelect={(value) => {
                                  setSelectedCategory(value);
                                  setSelectedSubcategory(""); // Reset subcategory
                                  setCategoryOpen(false);
                                }}
                              >
                                <Check
                                  className={cn(
                                    "mr-2 h-4 w-4",
                                    selectedCategory === category ? "opacity-100" : "opacity-0"
                                  )}
                                />
                                {category}
                              </CommandItem>
                            ))}
                          </CommandGroup>
                        </CommandList>
                      </Command>
                    </PopoverContent>
                  </Popover>
                </div>
                
                <div className="flex-1 grid gap-2">
                  <Label htmlFor="subcategory">Subcategoría</Label>
                  <Popover 
                    open={subcategoryOpen && !!selectedCategory} 
                    onOpenChange={setSubcategoryOpen}
                  >
                    <PopoverTrigger asChild>
                      <Button
                        id="subcategory"
                        variant="outline"
                        role="combobox"
                        aria-expanded={subcategoryOpen}
                        className="w-full justify-between"
                        disabled={!selectedCategory}
                      >
                        {selectedSubcategory || (selectedCategory ? "Selecciona una subcategoría" : "Primero selecciona una categoría")}
                        <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-full p-0">
                      <Command>
                        <CommandInput placeholder="Buscar subcategoría..." />
                        <CommandList>
                          <CommandEmpty>No se encontraron subcategorías.</CommandEmpty>
                          <CommandGroup>
                            {selectedCategory && categories[selectedCategory as keyof typeof categories].map((subcategory) => (
                              <CommandItem
                                key={subcategory}
                                value={subcategory}
                                onSelect={(value) => {
                                  setSelectedSubcategory(value);
                                  setSubcategoryOpen(false);
                                }}
                              >
                                <Check
                                  className={cn(
                                    "mr-2 h-4 w-4",
                                    selectedSubcategory === subcategory ? "opacity-100" : "opacity-0"
                                  )}
                                />
                                {subcategory}
                              </CommandItem>
                            ))}
                          </CommandGroup>
                        </CommandList>
                      </Command>
                    </PopoverContent>
                  </Popover>
                </div>
              </div>
            </div>
          </form>
        </CardContent>
        
        <CardFooter className="flex justify-end gap-2">
          <Button variant="outline">Cancelar</Button>
          <Button onClick={handleSubmit}>Subir PDF</Button>
        </CardFooter>
      </Card>
    </div>
  )
}

export default WelcomePage
}
}
export default WelcomePage